<?php

namespace backend\models;

use Yii;

/**
 * This is the model class for table "mj_student".
 *
 * @property integer $sid
 * @property string $sname
 * @property integer $sex
 * @property string $phone
 * @property string $address
 * @property integer $rid
 */
class Student extends \yii\db\ActiveRecord
{
    public $file;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'mj_student';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['sname', 'sex', 'createtime','hid'], 'required'],
            [['sex', 'rid'], 'integer'],
            [['sname'], 'string', 'max' => 50],
            [['phone'], 'string', 'max' => 11],
            [['address'], 'string', 'max' => 255],
            [['idcard'], 'string', 'max' => 18],
            [['idcard'], 'unique'],
            [['imageFile'], 'file', 'extensions' => 'png, jpg, jpeg, gif'],

        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'sid' => '学号',
            'sname' => '姓名',
            'sex' => '性别',
            'hid' => '爱好',
            'phone' => '联系方式',
            'address' => '家庭住址',
            'rid' => '班级',
            'idcard' => '身份证',
            'imageFile' => '头像',
            'createtime' => '创建时间',

        ];
    }

    /*
    *关联班级表
    */
    public function getRoom()
    {
        /**
         * 第一个是关联的表的名称(这里用了方法来调用，避免gii以后改变了)，
         * 第二个参数是一个数组。a=>b，a是关联表用于关联的字段，b是当前表的字段
         * 
         * 第一个参数为要关联的子表模型类名称，
         * 第二个参数指定 通过子表的 customer_id 去关联主表的 id 字段
        */
        return $this->hasOne(Room::className(), ['rid' => 'rid']);
    }

     /*
    *关联班级表
    */
    public function getHobby()
    {
        /**
         * 第一个是关联的表的名称(这里用了方法来调用，避免gii以后改变了)，
         * 第二个参数是一个数组。a=>b，a是关联表用于关联的字段，b是当前表的字段
         * 
         * 第一个参数为要关联的子表模型类名称，
         * 第二个参数指定 通过子表的 customer_id 去关联主表的 id 字段
        */
        return $this->hasOne(Hobby::className(), ['hid' => 'hid']);
    }

    public function beforeSave($insert) {
        if($this->hid) {
            $this->hid = implode(',',$this->hid);
     
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
     
    public function afterFind() {
        $this->hid = explode(',',$this->hid);
        parent::afterFind();
    }
    
    public function upload()
    {
        foreach ($this->imageFile as $file) {
            $file->saveAs('./upload/' . $file->baseName . '.' . $file->extension);
        }
        return true;
    }

}